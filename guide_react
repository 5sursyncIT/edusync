# Guide d'intégration API Odoo - Frontend React

## 📋 Vue d'ensemble

Ce guide explique comment intégrer correctement l'API backend Odoo avec votre application frontend React pour la gestion des étudiants.

## 🔧 Configuration du service API

### 1. Variables d'environnement

Créez un fichier `.env` à la racine de votre projet React :

```env
REACT_APP_API_BASE_URL=http://172.16.209.128:8069
REACT_APP_ODOO_DATABASE=odoo_ecole
```

### 2. Service API amélioré

Le fichier `odooApi.jsx` a été mis à jour avec toutes les méthodes nécessaires :

- **Authentification** : `authenticate()`, `isAuthenticated()`, `logout()`
- **CRUD Étudiants** : `getStudents()`, `getStudent()`, `createStudent()`, `updateStudent()`, `deleteStudent()`
- **Opérations avancées** : `batchOperations()`, `searchStudents()`
- **Dashboard** : `getStatistics()`, `getClasses()`, `getTeachers()`, `getGrades()`

## 📝 Utilisation dans les composants

### 1. Liste des étudiants (StudentList)

```javascript
// Récupérer les étudiants avec pagination
const fetchStudents = async (page, search) => {
  try {
    const response = await odooApi.getStudents(page, rowsPerPage, search);
    if (response.students && response.pagination) {
      setStudents(response.students);
      setTotalCount(response.pagination.total_count);
    }
  } catch (error) {
    // Gérer l'erreur
  }
};
```

### 2. Formulaire étudiant (Create/Edit)

```javascript
// Créer un étudiant
const handleCreate = async (formData) => {
  try {
    const response = await odooApi.createStudent(formData);
    // Rediriger vers la liste
  } catch (error) {
    // Gérer l'erreur
  }
};

// Mettre à jour un étudiant
const handleUpdate = async (id, formData) => {
  try {
    const response = await odooApi.updateStudent(id, formData);
    // Afficher message de succès
  } catch (error) {
    // Gérer l'erreur
  }
};
```

### 3. Suppression d'étudiant

```javascript
const handleDelete = async (studentId) => {
  try {
    const response = await odooApi.deleteStudent(studentId);
    // Rafraîchir la liste
  } catch (error) {
    // Gérer l'erreur
  }
};
```

## 🔐 Gestion de l'authentification

### 1. Page de connexion

```javascript
const handleLogin = async (credentials) => {
  try {
    const result = await odooApi.authenticate({
      username: credentials.username,
      password: credentials.password,
      db: 'odoo_ecole'
    });
    
    if (result.success) {
      // Rediriger vers le dashboard
      navigate('/dashboard');
    } else {
      setError(result.error);
    }
  } catch (error) {
    setError('Erreur de connexion');
  }
};
```

### 2. Protection des routes

```javascript
// Composant ProtectedRoute
const ProtectedRoute = ({ children }) => {
  const [isAuth, setIsAuth] = useState(null);
  
  useEffect(() => {
    const checkAuth = async () => {
      const authenticated = await odooApi.isAuthenticated();
      setIsAuth(authenticated);
    };
    checkAuth();
  }, []);
  
  if (isAuth === null) return <CircularProgress />;
  if (!isAuth) return <Navigate to="/login" />;
  
  return children;
};
```

## 📊 Structure des données

### Format des données étudiant

```javascript
{
  id: 1,
  name: "Jean Dupont",
  email: "jean.dupont@example.com",
  phone: "+221771234567",
  gender: "m",
  birth_date: "2000-05-15",
  course: { id: 1, name: "Informatique" },
  batch: { id: 2, name: "Batch 2024" },
  address: "123 Rue de la Paix",
  city: "Dakar",
  // ... autres champs
}
```

### Format de réponse avec pagination

```javascript
{
  status: "success",
  data: {
    students: [...],
    pagination: {
      current_page: 1,
      total_pages: 5,
      total_count: 123,
      limit: 25,
      has_next: true,
      has_prev: false
    }
  }
}
```

## 🎨 Composants Material-UI

### 1. Table avec pagination

```javascript
<TablePagination
  rowsPerPageOptions={[5, 10, 25, 50]}
  count={totalCount}
  rowsPerPage={rowsPerPage}
  page={page - 1} // Conversion 0-based pour MUI
  onPageChange={handleChangePage}
  onRowsPerPageChange={handleChangeRowsPerPage}
  labelRowsPerPage="Lignes par page"
/>
```

### 2. Recherche avec debounce

```javascript
useEffect(() => {
  const timeout = setTimeout(() => {
    fetchStudents(1, searchTerm);
  }, 500);
  
  return () => clearTimeout(timeout);
}, [searchTerm]);
```

## 🚨 Gestion des erreurs

### 1. Erreurs de session

```javascript
if (error.message.includes('Session expirée')) {
  setError("Session expirée. Redirection...");
  setTimeout(() => navigate('/login'), 2000);
}
```

### 2. Erreurs de validation

```javascript
const validateForm = () => {
  const errors = {};
  
  if (!formData.name.trim()) {
    errors.name = 'Le nom est obligatoire';
  }
  
  if (formData.email && !isValidEmail(formData.email)) {
    errors.email = 'Email invalide';
  }
  
  return Object.keys(errors).length === 0;
};
```

## 🔄 États de chargement

```javascript
// État de chargement global
{loading && (
  <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
    <CircularProgress />
  </Box>
)}

// État de sauvegarde
<Button disabled={saving}>
  {saving ? 'Enregistrement...' : 'Enregistrer'}
</Button>
```

## 📱 Responsive Design

```javascript
<Grid container spacing={3}>
  <Grid item xs={12} sm={6} md={4}>
    {/* Contenu adaptatif */}
  </Grid>
</Grid>
```

## 🛠️ Débogage

### 1. Logs détaillés

Le service API inclut des logs détaillés pour faciliter le débogage :

```javascript
console.log(`Envoi requête à ${endpoint}:`, { url, method, headers });
console.log(`Réponse de ${endpoint}:`, { status, headers });
```

### 2. Test de connexion

```javascript
// Tester la connexion API
const testConnection = async () => {
  try {
    const response = await odooApi.testConnection();
    console.log('Test API:', response);
  } catch (error) {
    console.error('Erreur test:', error);
  }
};
```

## 📚 Ressources supplémentaires

- [Documentation Material-UI](https://mui.com/)
- [React Router Documentation](https://reactrouter.com/)
- [Odoo REST API Guidelines](https://www.odoo.com/documentation/)

## 🎯 Prochaines étapes

1. Implémenter la recherche avancée avec filtres multiples
2. Ajouter l'export CSV/Excel des données
3. Implémenter la mise à jour en masse
4. Ajouter la gestion des photos d'étudiants
5. Créer des graphiques statistiques sur le dashboard